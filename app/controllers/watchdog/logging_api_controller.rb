# frozen_string_literal: true

module Watchdog
  # Fetches and compute data for the active users metrics generated by the Logging API
  class LoggingApiController < ApplicationController
    def active_users_weekly
      extract_data_for 'week'
    end

    def active_users_monthly
      extract_data_for 'month'
    end

    private

    def get_all_files_for(period)
      S3_BUCKET.list_objects_v2(
        bucket: 'govwifi-staging-metrics-bucket',
        prefix: "active-users-#{period}"
      )
    end

    def get_latest_file_for(period)
      files = get_all_files_for(period)

      if files.contents.empty?
        Rails.logger.warn(
          t('errors.data.no_recent_file', { period: period, name: 'active users' })
        )
        return
      end

      get_latest_file(files)
    end

    def get_latest_file(files)
      latest = files
               .contents
               .sort_by(&:last_modified)
               .reverse
               .first
               .key

      S3_BUCKET.get_object(
        bucket: 'govwifi-staging-metrics-bucket',
        key: latest
      )
    end

    def extract_data_for(period)
      raw = get_latest_file_for(period)

      return if raw.nil?

      data = JSON.parse(raw.body.read.to_s)

      map_data_for_period(data, period)
    end

    def map_data_for_period(data, period)
      if data['data'].nil?
        Rails.logger.warn(
          t('errors.data.no_data_in_file', { period: period, name: 'active users' })
        )

        return
      end

      filtered = data['data'].filter { |entry| entry['period'] == period }

      filtered.map do |entry|
        ["#{period}_start_at", 'count'].map { |a| entry[a] }
      end
    end
  end
end
